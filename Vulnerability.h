/*===================================================================*\
                             Vulnerability
                            ---------------
	
	This class is capable of calculating the vulnerability.
	For def see article XY.
 
  staci3 is using Eigen, see http://eigen.tuxfamily.org

    staci3
    Cs. Hos, R. Weber, T. Huzsvar
    https://github.com/weberrichard/staci3
\*==================================================================*/

#ifndef VULNERABILITY_H
#define VULNERABILITY_H

#include "Shutdown.h"

class Vulnerability : public Shutdown
{
public:
	Vulnerability(string spr_filename);
	~Vulnerability();

	// fill up localGamma and globalGamma
	void calculateVulnerability(); // default failure rate is relative pipelength
	void calculateVulnerability(vector<double> failureRate); // failure rate of segments

	void calculateVulnerabilitySeries(); // for series calculations

	// full up localGammaApprox and globalGammaApprox
	// calculates without hydraulics, only using topology
	// assumption: assumption: d(p) = d0
	void calculateVulnerabilityApprox(); // default failure rate is relative pipelength
	void calculateVulnerabilityApprox(vector<double> failureRate); // default failure rate is relative pipelength

  // calculating the vulnerability of all the backups
	void calculateBackupVulnerability();
	vector<double> backupGamma; // global gamma of every backup

	// local vulnerabilites, size of number segments
	vector<double> localGamma;
	// network vulnerabilty, expected loss in demands in case of random pipebreaks
	double globalGamma;

	// relative shortfall of all the backups
	double backupRelativeShortfall;
	double backupPressure;
	double presRef;

	// approx vulnerabilites, assumption: d(p) = d0, uniform length-based demand, uniform segment-based demand
	vector<double> localGammaSegment, localGammaLength, localGammaDemand;
	double globalGammaSegment, globalGammaLength, globalGammaDemand;

	vector<double> getRelativeDemandLoss()
	{
		return relativeDemandLoss;
	}

	// relative demand loss in case of the loss of the segment
	vector<double> relativeDemandLoss;
	vector<double> relativeSegmentLoss;
	vector<double> relativeLengthLoss;
	vector<double> relativeDemandLossApprox;
};

#endif