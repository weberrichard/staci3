#include <iostream>
#include <fstream>
#include <random>
#include <iomanip>
#include <string>
#include <algorithm>
#include <stdio.h>
#include <sys/stat.h>

#include "../../Vulnerability.h"

using namespace std;
using namespace Eigen;

int main(int argc, char* argv[])
{
   // Name of containing folder of staci file
   string caseFolder = "../../Networks/Sopron/";

   vector<string> everyCase;
   everyCase.push_back("villasor");
   /*everyCase.push_back("ferto");
   everyCase.push_back("sanchegy");
   everyCase.push_back("buk");
   everyCase.push_back("lovo");
   everyCase.push_back("nagycenk");
   everyCase.push_back("vashegy");
   everyCase.push_back("varis");
   everyCase.push_back("becsidomb");
   everyCase.push_back("tomalom");
   everyCase.push_back("szakov");
   everyCase.push_back("kohegy");
   everyCase.push_back("harka");
   everyCase.push_back("pozsonyiut");
   everyCase.push_back("sopronkovesd");
   everyCase.push_back("dudlesz");
   everyCase.push_back("ivan");
   everyCase.push_back("agyagosszergeny");
   everyCase.push_back("kofejto");
   everyCase.push_back("simasag");
   everyCase.push_back("acsad");
   everyCase.push_back("csaford");
   everyCase.push_back("nagylozs");
   everyCase.push_back("balf");
   everyCase.push_back("csapod");
   everyCase.push_back("und");
   everyCase.push_back("rojtokmuzsaj");
   everyCase.push_back("brennberg");
   everyCase.push_back("pusztacsalad");
   everyCase.push_back("kutyahegy");
   everyCase.push_back("nyarliget");
   everyCase.push_back("meszlen");
   everyCase.push_back("fertoujlak");
   everyCase.push_back("gorbehalom");
   everyCase.push_back("tozeggyarmajor");
   everyCase.push_back("ebergoc");
   everyCase.push_back("csillahegy");
   everyCase.push_back("jerevan");
   everyCase.push_back("gloriette");
   everyCase.push_back("alomhegy");
   everyCase.push_back("ohermes");
   everyCase.push_back("ujhermes");*/

   int nCases = everyCase.size();
   cout << endl << "   CASES\n***********\n";
   for(int i=0; i<nCases; i++)
      cout << i+1 << "  " << everyCase[i] << endl;
   
   // for writing to files
   ofstream wFile;

   for(int i=0; i<nCases; i++)
   {
      printf("\n[*] %15s\n", everyCase[i].c_str());

      string caseName = everyCase[i];
      Vulnerability *wds = new Vulnerability(caseFolder + caseName + ".inp");
      wds->calculateVulnerability();
      int nSeg = wds->getNumberSegment();

      // writing the relative demand losses to file
      writeVectorDouble("Network Data/" + caseName + "/relativeDemandLoss.txt",wds->relativeDemandLoss);

      // segment number, sum demand and sum length of disconnected segments
      vector<int> sumSegments(nSeg,0);
      vector<double> sumPipes(nSeg,0.);
      vector<double> sumCons(nSeg,0.);
      for(int j=0; j<nSeg; j++)
      {
         vector<int> cs;
         wds->openEverything();
         wds->closeSegment(j);
         for(int k=0; k<wds->nodes.size(); k++)
         {
            if(wds->nodes[k]->status<1)
            {
               cs.push_back(wds->nodes[k]->segment);
               sumCons[j] += wds->nodes[k]->getProperty("demand");
            }
         }
         cs = unique(cs);
         sumSegments[j] = cs.size();
         for(int k=0; k<wds->edges.size(); k++)
         {
            if(wds->edges[k]->typeCode == 1 && wds->edges[k]->status<1)
            {
               sumPipes[j] += wds->edges[k]->getDoubleProperty("length");
            }
         }
      }

      writeVectorInt("Network Data/" + caseName + "/sumSegments.txt", sumSegments);
      writeVectorDouble("Network Data/" + caseName + "/sumPipes.txt", sumPipes);
      writeVectorDouble("Network Data/" + caseName + "/sumCons.txt", sumCons);
   }

   cout << endl << endl;
   return 0;
}