#include <iostream>
#include <fstream>
#include <random>
#include <iomanip>
#include <string>
#include <algorithm>
#include <stdio.h>
#include <sys/stat.h>

#include "../../Vulnerability.h"

using namespace std;
using namespace Eigen;

double randomDouble(double a, double b)
{
   double random = ((double) rand()) / (double) RAND_MAX;
   double diff = b - a;
   double r = random * diff;
   return a + r;
}

int main(int argc, char* argv[])
{
   // Name of containing folder of staci file
   string caseFolder = "../../Networks/Sopron/";

   vector<string> everyCase;
   everyCase.push_back("villasor_mat");
   everyCase.push_back("ferto_mat");
   everyCase.push_back("sanchegy_mat");
   everyCase.push_back("buk_mat");
   everyCase.push_back("lovo_mat");
   everyCase.push_back("nagycenk_mat");
   everyCase.push_back("vashegy_mat");
   everyCase.push_back("varis_mat");
   everyCase.push_back("becsidomb_mat");
   everyCase.push_back("tomalom_mat");
   everyCase.push_back("szakov_mat");
   everyCase.push_back("kohegy_mat");
   everyCase.push_back("harka_mat");
   everyCase.push_back("pozsonyiut_mat");
   everyCase.push_back("sopronkovesd_mat");
   everyCase.push_back("dudlesz_mat");
   everyCase.push_back("ivan_mat");
   everyCase.push_back("agyagosszergeny_mat");
   everyCase.push_back("kofejto_mat");
   everyCase.push_back("simasag_mat");
   everyCase.push_back("acsad_mat");
   everyCase.push_back("csaford_mat");
   everyCase.push_back("nagylozs_mat");
   everyCase.push_back("balf_mat");
   everyCase.push_back("csapod_mat");
   everyCase.push_back("und_mat");
   everyCase.push_back("rojtokmuzsaj_mat");
   everyCase.push_back("brennberg_mat");
   everyCase.push_back("pusztacsalad_mat");
   everyCase.push_back("kutyahegy_mat");
   everyCase.push_back("nyarliget_mat");
   everyCase.push_back("meszlen_mat");
   everyCase.push_back("fertoujlak_mat");
   everyCase.push_back("gorbehalom_mat");
   everyCase.push_back("tozeggyarmajor_mat");
   everyCase.push_back("ebergoc_mat");
   everyCase.push_back("csillahegy_mat");
   everyCase.push_back("jerevan_mat");
   everyCase.push_back("gloriette_mat");
   everyCase.push_back("alomhegy_mat");
   everyCase.push_back("ohermes_mat");
   everyCase.push_back("ujhermes_mat");

   int nCases = everyCase.size();
   cout << endl << "   CASES\n***********\n";
   for(int i=0; i<nCases; i++)
      cout << i+1 << "  " << everyCase[i] << endl;
   
   srand( (unsigned)time(NULL) );
   makeDirectory("Network Data");

   // for writing to files
   ofstream wFile;

   for(int i=0; i<nCases; i++)
   {
      printf("\n[*] %15s\n", everyCase[i].c_str());
      string caseName = everyCase[i];

      Vulnerability *wds = new Vulnerability(caseFolder + caseName + ".inp");
      wds->buildSegmentGraph();

      vector<double> failureRate(wds->numberSegment,0.);
      for(int j=0; j<wds->pipeIndex.size(); j++)
      {
         int idx = wds->pipeIndex[j];
         int seg = wds->edges[idx]->segment;

         double l = wds->edges[idx]->getDoubleProperty("length");
         string mat = wds->edges[idx]->getStringProperty("material");

         double r = 10.06;
         if(mat == "s")
            r = 38.37;
         else if(mat == "ac")
            r = 15.29;
         else if(mat == "sgci")
            r = 0.42;
         else if(mat == "km")
            r = 0.08;
         else if(mat == "ss")
            r = 8.32;
         else if(mat == "hdpe")
            r = 6.95;
         else if(mat == "lead")
            r = 67.42;
         else if(mat == "ci")
            r = 34.95;
         else if(mat == "pvc")
            r = 17.41;

         failureRate[seg] += l*r;
      }

      double norm=0.;
      for(int j=0; j<wds->numberSegment; j++)
      {
         norm += failureRate[j];
      }
      for(int j=0; j<wds->numberSegment; j++)
      {
         failureRate[j] /= norm;
      }

      wds->calculateVulnerability(failureRate);

     // saving original vulnerability
      vector<double> vulner;
      for(unsigned int j=0; j<wds->getNumberSegment(); j++)
      {
         vulner.push_back(wds->localGamma[j]);
      }

      // writing to file for further analysis
      wFile.open("Network Data/" + caseName + "/vulner_orig_rand.txt");
      for(int j=0; j<vulner.size(); j++)
      {
         wFile << vulner[j] << '\n';
      }
      wFile.close();
      
   }

   cout << endl << endl;
   return 0;
}

